generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  name                  String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  account_creation_date DateTime  @default(now())
  country_of_residence  String?
  phone_number          String?
  address               String?
  gender                String?
  accounts              Account[]
  posts                 Post[]
  sessions              Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Project {
  id           Int            @id @default(autoincrement())
  name         String
  startDate    DateTime
  endDate      DateTime
  description  String?
  url          String?
  frontendId   Int?           @unique
  backendId    Int?           @unique
  databaseId   Int?           @unique
  apiId        Int?           @unique
  deploymentId Int?           @unique
  api          TechnologySet? @relation("ApiRelation", fields: [apiId], references: [id], map: "Project_Api_fkey")
  backend      TechnologySet? @relation("BackendRelation", fields: [backendId], references: [id], map: "Project_Backend_fkey")
  database     TechnologySet? @relation("DatabaseRelation", fields: [databaseId], references: [id], map: "Project_Database_fkey")
  deployment   TechnologySet? @relation("DeploymentRelation", fields: [deploymentId], references: [id], map: "Project_Deployment_fkey")
  frontend     TechnologySet? @relation("FrontendRelation", fields: [frontendId], references: [id], map: "Project_Frontend_fkey")
}

model TechnologySet {
  id                 Int      @id @default(autoincrement())
  technologies       String[]
  features           String[]
  projectsApi        Project? @relation("ApiRelation")
  projectsBackend    Project? @relation("BackendRelation")
  projectsDatabase   Project? @relation("DatabaseRelation")
  projectsDeployment Project? @relation("DeploymentRelation")
  projectsFrontend   Project? @relation("FrontendRelation")
}
